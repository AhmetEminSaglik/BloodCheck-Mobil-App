version: '3.8'

services:
  mysql-db:
    image: ${IMAGE_MYSQL}
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${MYSQL_PORT}"
    networks:
      - my-network
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}", "ping" ]
      interval: 30s
      retries: 3
      timeout: 10s
      start_period: 10s
    restart: always

  server:
    image: ${IMAGE_SERVER}
    container_name: test-server
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - "${SERVER_PORT}"
    networks:
      - my-network
    depends_on:
      mysql-db:
        condition: service_healthy
    restart: always

  ws-bloodcheck:
    image: ${IMAGE_BLOODCHECK_WS}
    container_name: ws-bloodcheck
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    ports:
      - "${WS_BLOODCHECK_PORT}"
    networks:
      - my-network
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "${BLOODCHECK_APP_URL}" ]  # WS servisi i√ßin healthcheck endpoint
#      interval: 30s
#      retries: 3
#      timeout: 10s
#      start_period: 10s
    depends_on:
      mysql-db:
        condition: service_healthy
    restart: always

  react-app:
    image: ${IMAGE_BLOODCHECK_REACT}
    container_name: react-app
    ports:
      - "${REACT_BLOODCHECK_PORT}"
    networks:
      - my-network
#    depends_on:
#      ws-bloodcheck:
#        condition: service_healthy
    restart: always

  vaadinDemo:
    image: ${IMAGE_VAADIN_DEMO}
    container_name: vaadin-demo
    ports:
      - "${VAADIN_DEMO_PORT}"
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - my-network
    depends_on:
      - mysql-db
    restart: always

networks:
  my-network:
    driver: bridge

volumes:
  mysql-data:

